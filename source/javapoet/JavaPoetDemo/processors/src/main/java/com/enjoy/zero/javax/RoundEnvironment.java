package com.enjoy.zero.javax;

/**
 * [享学课堂] {@link https://enjoy.ke.qq.com}
 * 学无止境，让学习成为一种享受
 * TODO: 主讲Zero老师QQ 2124346685
 * TODO: 往期课程咨询芊芊老师QQ 2130753077
 * TODO: VIP课程咨询安生老师QQ 669100976
 * 类说明:
 */
import javax.annotation.processing.Processor;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;
import java.util.Set;
import java.lang.annotation.Annotation;

/**
 * An annotation processing tool framework will {@linkplain
 * Processor#process provide an annotation processor with an object
 * implementing this interface} so that the processor can query for
 * information about a round of annotation processing.
 *
 * @author Joseph D. Darcy
 * @author Scott Seligman
 * @author Peter von der Ah&eacute;
 * @since 1.6
 */
public interface RoundEnvironment {
    /**
     * 如果此 round 生成的类型不是以注释处理的后续 round 为准，则返回 true；否则返回 false。
     * Returns {@code true} if types generated by this round will not
     * be subject to a subsequent round of annotation processing;
     * returns {@code false} otherwise.
     *
     * @return {@code true} if types generated by this round will not
     * be subject to a subsequent round of annotation processing;
     * 如果此 round 生成的类型不是以注释处理的后续 round 为准，则返回 true；否则返回 false
     * returns {@code false} otherwise
     */
    boolean processingOver();

    /**
     * 如果在以前的处理 round 中发生错误，则返回 true；否则返回 false。
     * Returns {@code true} if an error was raised in the prior round
     * of processing; returns {@code false} otherwise.
     *
     * @return {@code true} if an error was raised in the prior round
     * 如果在以前的处理 round 中发生错误，则返回 true；否则返回 false
     * of processing; returns {@code false} otherwise
     */
    boolean errorRaised();

    /**
     *   返回以前的 round 生成的注释处理根元素。
     * Returns the root elements for annotation processing generated
     * by the prior round.
     *
     * @return the root elements for annotation processing generated
     * 返回以前的 round 生成的注释处理根元素；如果没有这样的元素，则返回一个空集
     * by the prior round, or an empty set if there were none
     */
    Set<? extends Element> getRootElements();

    /**
     * 返回使用给定注释类型注释的元素。该注释可能直接出现或者被继承。
     * 只返回注释处理的此 round 中 包括 的 package 元素和 type 元素、成员声明、参数或者这些元素中声明的类型参数。
     * 所包括的 type 元素是 根类型和嵌套在这些类型中的所有成员类型。
     * 包中的元素不认为被包含在内，因为已经为该包创建了一个 package-info 文件。
     * Returns the elements annotated with the given annotation type.
     * The annotation may appear directly or be inherited.  Only
     * package elements and type elements <i>included</i> in this
     * round of annotation processing, or declarations of members,
     * constructors, parameters, or type parameters declared within
     * those, are returned.  Included type elements are {@linkplain
     * #getRootElements root types} and any member types nested within
     * them.  Elements in a package are not considered included simply
     * because a {@code package-info} file for that package was
     * created.
     *
     * @param a  annotation type being requested
     *           a - 将被请求的注释类型
     * @return the elements annotated with the given annotation type,
     * or an empty set if there are none
     * 使用给定注释类型注释的元素；如果没有这样的元素，则返回一个空集
     * @throws IllegalArgumentException if the argument does not
     * represent an annotation type
     * 如果参数不表示注释类型
     */
    Set<? extends Element> getElementsAnnotatedWith(TypeElement a);

    /**
     * Returns the elements annotated with the given annotation type.
     * The annotation may appear directly or be inherited.  Only
     * package elements and type elements <i>included</i> in this
     * round of annotation processing, or declarations of members,
     * constructors, parameters, or type parameters declared within
     * those, are returned.  Included type elements are {@linkplain
     * #getRootElements root types} and any member types nested within
     * them.  Elements in a package are not considered included simply
     * because a {@code package-info} file for that package was
     * created.
     *
     * @param a  annotation type being requested
     * @return the elements annotated with the given annotation type,
     * or an empty set if there are none
     * @throws IllegalArgumentException if the argument does not
     * represent an annotation type
     */
    Set<? extends Element> getElementsAnnotatedWith(Class<? extends Annotation> a);
}
